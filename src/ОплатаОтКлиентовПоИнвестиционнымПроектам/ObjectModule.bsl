#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры
// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
		И Параметры.Свойство("ОписаниеКоманды")
		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда  		
		//Если Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "Продажи" Тогда  			
		//	СформироватьПараметрыФормыПродажи(Параметры.ПараметрКоманды, ЭтаФорма.ФормаПараметры); 			
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоЗаказу" Тогда
		//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("ЗаказКлиента", Параметры.ПараметрКоманды);
		//Иначе
		//Если Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ЗадолженностьПоПартнеру" Тогда
		//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("Партнер", Параметры.ПараметрКоманды);
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ЗадолженностьПоСегменту" Тогда 			
		//	Параметры.ФиксированныеНастройки = ПолучитьФиксированныеНастройкиПродажиПоСегменту(Параметры.ПараметрКоманды);
		//	ЭтаФорма.ФормаПараметры.ФиксированныеНастройки = Параметры.ФиксированныеНастройки;     			
		//КонецЕсли;  		
	КонецЕсли;
	
	// Дополнительные команды
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	НастройкиОтчета = ЭтаФорма.НастройкиОтчета;
	
	Если НастройкиОтчета.Свойство("РасширенныйОтбор") Тогда
		РасширенныйОтбор = КомпоновщикНастроекФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(
			Тип("ЭлементОтбораКомпоновкиДанных"));
		РасширенныйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
		Если ТипЗнч(НастройкиОтчета.РасширенныйОтбор) = Тип("Массив") Тогда
			ЭтоМассив = Истина;
			Если НастройкиОтчета.РасширенныйОтбор.Количество() > 0 Тогда
				ПервыйЭлемент = НастройкиОтчета.РасширенныйОтбор[0];
			Иначе
				ПервыйЭлемент = Неопределено;
			КонецЕсли;
		Иначе
			ЭтоМассив = Ложь;
			ПервыйЭлемент = НастройкиОтчета.РасширенныйОтбор;
		КонецЕсли;
		Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
			Если ЭтоМассив Тогда
				ЕстьПодчиненныеПартнеры = Ложь;
				Для Каждого ЭлементПараметраКоманды Из НастройкиОтчета.РасширенныйОтбор Цикл
					Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
						ЕстьПодчиненныеПартнеры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(НастройкиОтчета.РасширенныйОтбор);
			КонецЕсли;
			Если ЕстьПодчиненныеПартнеры И ЭтоМассив Тогда
				РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			ИначеЕсли ЕстьПодчиненныеПартнеры Тогда
				РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			ИначеЕсли ЭтоМассив Тогда
				РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			РасширенныйОтбор.ПравоеЗначение = НастройкиОтчета.РасширенныйОтбор;
		ИначеЕсли ТипЗнч(НастройкиОтчета.РасширенныйОтбор) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			РасширенныйОтбор.ПравоеЗначение = СегментыСервер.МассивЭлементов(
				ПервыйЭлемент);
		КонецЕсли;
		РасширенныйОтбор.Использование = Истина;
	КонецЕсли;

КонецПроцедуры
// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", ЭтаФорма.КлючТекущегоВарианта);
	НастроитьПараметрыОтборыПоФункциональнымОпциям(НовыеНастройкиКД);

КонецПроцедуры
// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПриЗагрузкеВариантаНаСервере
//
Процедура ПриЗагрузкеВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	Параметры = ЭтаФорма.НастройкиОтчета;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	Если Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено
		И Параметры.Расшифровка.ПрименяемыеНастройки.ДополнительныеСвойства.Свойство("ФиксированныеНастройки") Тогда
		КомпоновщикНастроекФормы.ЗагрузитьНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
		НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	КонецЕсли;
	

КонецПроцедуры
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытий
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если НадоРассчитатьОриентировочныеДвиженияПоПартиям() Тогда 
		ПолучитьТаблицуСписанийПоПартиям();
	КонецЕсли;
	
	РаспаковкаТекстаЗапроса();

	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	//ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ВыручкаИСебестоимостьПродаж.Запрос;
	//
	//ТекстЗапроса = СтрЗаменить(
	//	ТекстЗапроса, 
	//	"&ТекстЗапросаВесНоменклатуры1", 
	//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура"));
	//	
	//ТекстЗапроса = СтрЗаменить(
	//	ТекстЗапроса, 
	//	"&ТекстЗапросаОбъемНоменклатуры1", 
	//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура"));
	//
	//СхемаКомпоновкиДанных.НаборыДанных.ВыручкаИСебестоимостьПродаж.Запрос = ТекстЗапроса;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(СтруктураЗаголовковПолей(), МакетКомпоновки);
	
	// Проверим, что хотя бы одна группировка отчета включена
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	//ПроверяемыеПоля = Новый Массив;
	//ПроверяемыеПоля.Добавить("Поставщик");
	//УниверсальныеМеханизмыПартийИСебестоимости.ДобавитьПредупреждениеОбОсобенностяхФормированияОтчета(ДокументРезультат, КомпоновщикНастроек, ПроверяемыеПоля);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КомпоновкаДанныхСервер.ОформитьДиаграммыОтчета(КомпоновщикНастроек, ДокументРезультат);
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура НастроитьПараметрыОтчетаПоВариантуОтчета(НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
	
	Если НовыеНастройкиКД = Неопределено
		Или НовыеПользовательскиеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ПредопределенныйВариант = ПолучитьПредопределенныйВариант(НастройкиОтчета.ВариантСсылка);
	//
	//ПараметрДанныеОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ДанныеОтчета");
	//ЗначениеПараметраДанныеОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеОтчета"));
	//
	//ПараметрПоПредприятию = СхемаКомпоновкиДанных.Параметры.Найти("ПоПредприятию");
	//
	//СписокВыбора = Новый СписокЗначений;
	//
	//Если ПредопределенныйВариант.КлючВарианта = "ПродажиПоСделкамПоПредприятию"
	//	Или ПредопределенныйВариант.КлючВарианта = "ПродажиПоПартнерамПоПредприятию"
	//	Или ПредопределенныйВариант.КлючВарианта = "ПродажиСводно" Тогда
	//	
	//	СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета с НДС'"));
	//	СписокВыбора.Добавить(2, НСтр("ru = 'В валюте упр. учета без НДС'"));
	//	ПараметрПоПредприятию.Значение = Истина;
	//	
	//ИначеЕсли ПредопределенныйВариант.КлючВарианта = "ПродажиПоСделкамПоОрганизациям"
	//	Или ПредопределенныйВариант.КлючВарианта = "ПродажиПоПартнерамПоОрганизациям"
	//	Или ПредопределенныйВариант.КлючВарианта = "ПродажиОрганизаций" Тогда	
	//	
	//	Если ПолучитьФункциональнуюОпцию("ВестиУправленческийУчетОрганизаций") Тогда
	//		СписокВыбора.Добавить(3, НСтр("ru = 'В валюте упр. учета'"));
	//	КонецЕсли;
	//	СписокВыбора.Добавить(4, НСтр("ru = 'В валюте регл. учета'"));
	//	ПараметрПоПредприятию.Значение = Ложь;
	//	
	//Иначе
	//	
	//	СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета с НДС'"));
	//	СписокВыбора.Добавить(2, НСтр("ru = 'В валюте упр. учета без НДС'"));
	//	СписокВыбора.Добавить(4, НСтр("ru = 'В валюте регл. учета'"));
	//	ПараметрПоПредприятию.Значение = Истина;
	//	
	//КонецЕсли;
	//
	//ПараметрДанныеОтчета.УстановитьДоступныеЗначения(СписокВыбора);
	//
	//НастройкаДанныеОтчета = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЗначениеПараметраДанныеОтчета.ИдентификаторПользовательскойНастройки);
	//Если Не НастройкаДанныеОтчета = Неопределено
	//	И СписокВыбора.НайтиПоЗначению(НастройкаДанныеОтчета.Значение) = Неопределено Тогда
	//	НастройкаДанныеОтчета.Значение = СписокВыбора[0].Значение;
	//КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьПредопределенныйВариант(Знач Вариант)
	
	КлючиВариантов = Новый Массив;
	КлючиВариантов.Добавить("ОплатыОтКлиентовПоПартиямТоваров");
	КлючиВариантов.Добавить("ПлоскийСписок");
	
	Пока КлючиВариантов.Найти(Вариант.КлючВарианта) = Неопределено
		И ЗначениеЗаполнено(Вариант.Родитель) Цикл
		Вариант = Вариант.Родитель;
	КонецЦикла;
	
	Возврат Вариант;
	
КонецФункции
Процедура УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы)
	
	//КомпоновкаДанныхСервер.УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	//КомпоновкаДанныхСервер.НастроитьДинамическийПериод(СхемаКомпоновкиДанных, КомпоновщикНастроек, Истина);
	//
	//ПараметрПоказыватьПродажи = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоказыватьПродажи");
	//Если ПараметрПоказыватьПродажи <> Неопределено 
	//	И ПараметрПоказыватьПродажи.Значение = Неопределено Тогда
	//	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоказыватьПродажи", 1);
	//			
	//	ПользовательскиеНастройкиМодифицированы = Истина;
	//КонецЕсли;
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);
	//СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	// Строковые литералы
	//КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаПродажиПоЗаказам", НСтр("ru='Продажи по заказам'"));
	//КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаПродажиБезЗаказов", НСтр("ru='Продажи без заказов'"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИнвестиционныйПроект", ПолучитьРеквизитИнвестиционныйПроект());
	
КонецПроцедуры
Функция ВспомогательныеПараметрыОтчета()
	
	ВспомогательныеПараметры = Новый Массив;
	
	КлючТекущегоВарианта = "";
	//Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("КлючТекущегоВарианта", КлючТекущегоВарианта) Тогда
	//	Если Не КлючТекущегоВарианта = "ДинамикаПродаж"
	//		И Не КлючТекущегоВарианта = "ДинамикаПродажБизнесРегионы" Тогда
	//		ВспомогательныеПараметры.Добавить("Периодичность");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ВспомогательныеПараметры.Добавить("КоличественныеИтогиПоЕдИзм");
	//ВспомогательныеПараметры.Добавить("МаксимумСерийКоличество");
	//ВспомогательныеПараметры.Добавить("ВыделениеСерийДиаграмм");
	//ВспомогательныеПараметры.Добавить("ОтслеживаемыеАналитики");
	//ВспомогательныеПараметры.Добавить("ГрадиентСерийДиаграмм");
	//ВспомогательныеПараметры.Добавить("ОтображениеМаркеровТочекДиаграмм");
	//
	//КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	
	Возврат ВспомогательныеПараметры;

КонецФункции
Функция СтруктураЗаголовковПолей()
	СтруктураЗаголовковПолей = Новый Структура;
	
	//СтруктураЗаголовковВалют = КомпоновкаДанныхСервер.СтруктураЗаголовковВалютСквознаяСебестоимость(КомпоновщикНастроек);
	//ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЗаголовковПолей, СтруктураЗаголовковВалют, Ложь);
	//
	//СтруктуруЗаголовковПолейЕдиницИзмерений = КомпоновкаДанныхСервер.СтруктураЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек);
	//ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЗаголовковПолей, СтруктуруЗаголовковПолейЕдиницИзмерений, Ложь);
	
	Возврат СтруктураЗаголовковПолей;
КонецФункции
Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Контрагент");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Организация");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Склад");
	КонецЕсли;
	
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
	//	КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы, "ЕдиницыКоличества");
	//КонецЕсли;
	
КонецПроцедуры
//Процедура СформироватьПараметрыФормыПродажи(ПараметрКоманды, ПараметрыФормы)

//	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
//		ЭтоМассив = Истина;
//		Если ПараметрКоманды.Количество() > 0 Тогда
//			ПервыйЭлемент = ПараметрКоманды[0];
//		Иначе
//			ПервыйЭлемент = Неопределено;
//		КонецЕсли;
//	Иначе
//		ЭтоМассив = Ложь;
//		ПервыйЭлемент = ПараметрКоманды;
//	КонецЕсли;
//	
//	Если ЭтоМассив Тогда
//		ЕстьПодчиненныеПартнеры = Ложь;
//		Для Каждого ЭлементПараметраКоманды Из ПараметрКоманды Цикл
//			Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
//				ЕстьПодчиненныеПартнеры = Истина;
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	Иначе
//		ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ПараметрКоманды);
//	КонецЕсли;
//	
//	Если ЕстьПодчиненныеПартнеры Тогда
//		ДобавитьНижестоящихПартнеровВМассив(ПараметрКоманды, ПараметрКоманды);
//		ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
//		ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
//	Иначе
//		ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
//		ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
//	КонецЕсли;
//	
//КонецПроцедуры
//Процедура ДобавитьНижестоящихПартнеровВМассив(Знач МассивПартнеров, НовыйМассивПартнеров)
//	
//	Для Каждого Партнер Из МассивПартнеров Цикл
//		
//		МассивНижестоящихПартнеров = ПартнерыИКонтрагенты.ПолучитьНижестоящихПартнеров(Партнер);
//		Для Каждого НижестоящийПартнер Из МассивНижестоящихПартнеров Цикл
//			Если НижестоящийПартнер <> Партнер Тогда
//				НовыйМассивПартнеров.Добавить(НижестоящийПартнер);
//			КонецЕсли;
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//КонецПроцедуры
Функция ПолучитьФиксированныеНастройкиПродажиПоСегменту(ПараметрКоманды)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		ЭтоМассив = Истина;
		Если ПараметрКоманды.Количество() > 0 Тогда
			ПервыйЭлемент = ПараметрКоманды[0];
		Иначе
			ПервыйЭлемент = Неопределено;
		КонецЕсли;
	Иначе
		ЭтоМассив = Ложь;
		ПервыйЭлемент = ПараметрКоманды;
	КонецЕсли;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ЭлементОтбора.ПравоеЗначение = СегментыВызовСервера.СписокЗначений(ПервыйЭлемент);
	
	Возврат ФиксированныеНастройки;
	
КонецФункции
#КонецОбласти

#КонецЕсли


Функция СведенияОВнешнейОбработке() Экспорт 

	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", 				"ДополнительныйОтчет");
	ПараметрыРегистрации.Вставить("Назначение", 		"");
	ПараметрыРегистрации.Вставить("Наименование", 		НСтр("ru = '<АМ> Оплата от клиентов по инвестиционным проектам (версия 3.7)'"));
	ПараметрыРегистрации.Вставить("Версия", 			"3.7");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	ИСТИНА);
	ПараметрыРегистрации.Вставить("Информация", 		НСтр("ru = 'Отчет: ""Оплата от клиентов по инвестиционным проектам (версия 3.7)""'"));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
					НСтр("ru = '<АМ> Оплата от клиентов по инвестиционным проектам (версия 3.7)'"),
					"<АМ> Оплата от клиентов по инвестиционным проектам (версия 3.7)",
					"ОткрытиеФормы",
					Истина,
					"");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;       	
	
КонецФункции
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0.0") 
	
	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда 
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы; 
		ОбъектыНазначенияФормы = Новый Массив; 
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы); 
	КонецЕсли; 
	ПараметрыРегистрации = Новый Структура; 
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); 
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина); 
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы); 
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда 
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки); 
	Если Не ЗначениеЗаполнено(Информация) Тогда 
		Информация = ЭтотОбъект.Метаданные().Комментарий; 
	КонецЕсли; ПараметрыРегистрации.Вставить("Информация", Информация); 
	ПараметрыРегистрации.Вставить("Версия", Версия); 
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений; 
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево")); 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка")); 
	
	Возврат Команды; 
	
КонецФункции
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	// Добавляем команду в таблицу команд по переданному описанию. 
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд 
	НоваяКоманда 						= ТаблицаКоманд.Добавить(); 
	НоваяКоманда.Представление 			= Представление; 
	НоваяКоманда.Идентификатор 			= Идентификатор; 
	НоваяКоманда.Использование 			= Использование; 
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение; 
	НоваяКоманда.Модификатор 			= Модификатор; 
	
КонецПроцедуры

Функция РаспаковкаТекстаЗапроса() Экспорт
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
	
	РазмерШага = 536870912; // 2^29 секунд - это 17 лет назад - февраль 1997 года!  	
	Разделители = СтрВхождения(ТекстЗапроса, ";");                                    	
	Рефрен = Сред(ТекстЗапроса, Разделители[5] + 1, Разделители[6] - Разделители[5]);
	Рефрены = "";
	ДопРефрены = "";
	Пока РазмерШага > 1 Цикл 
		Рефрены 	= Рефрены + СтрЗаменить(СтрЗаменить(Рефрен, "Шаг_1", "Шаг_" + Формат(РазмерШага / 2, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		ДопРефрены 	= ДопРефрены + СтрЗаменить(СтрЗаменить(СтрЗаменить(Рефрен, "Шаг_1", "ДопШаг_" + Формат(РазмерШага / 2, "ЧГ=0")), "Шаг_536870912", "ДопШаг_"+Формат(РазмерШага, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		РазмерШага 	= РазмерШага / 2
	КонецЦикла;
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос =
		Сред(ТекстЗапроса, 1, Разделители[5]) + Рефрены + Сред(ТекстЗапроса, Разделители[6] + 1, Разделители[8]-Разделители[6])
		+ Сред(ТекстЗапроса, Разделители[8]+1, Разделители[9]-Разделители[8]) + ДопРефрены + Сред(ТекстЗапроса, Разделители[10] + 1);
		
	//сообщить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос);
		
КонецФункции
Функция СтрВхождения(Строка, ПодстрокаПоиска, ё = 0)	
	Ответ = Новый Массив;  	
	Для ж = 1 По СтрЧислоВхождений(Строка, ПодстрокаПоиска) Цикл  		
		ё = Найти(Сред(Строка, ё + 1), ПодстрокаПоиска) + ё; 
		Ответ.Добавить(ё)    		
	КонецЦикла; 	
	Возврат Ответ  	
КонецФункции

Функция ПолучитьРеквизитИнвестиционныйПроект()
	
	УдалитьДопРеквизит = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
	|	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПриобретениеТоваровУслуг);
	Запрос.УстановитьПараметр("Наименование", "%Инвестиционный проект%");
	
	Выборка = Запрос.Выполнить().Выбрать(); 	
	Пока Выборка.Следующий() Цикл 
		//Если Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Проекты")) Тогда 
		Если Выборка.ЭтоДополнительноеСведение Тогда 
			Возврат Выборка.Ссылка;
		Иначе			
			УдалитьДопРеквизит = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Сообщить("Не найдено дополнительный реквизит/сведение ""Инвестиционный проект""");
	Возврат Неопределено;
	
	//НачатьТранзакцию();
	//
	//Если УдалитьДопРеквизит <> Неопределено Тогда 
	//	НенужныйРеквизит 						= УдалитьДопРеквизит.ПолучитьОбъект();
	//	НенужныйРеквизит.Имя		 			= "ИнвестиционныйПроектУдален";
	//	НенужныйРеквизит.Наименование 			= "-";
	//	НенужныйРеквизит.Заголовок 				= "-";
	//	НенужныйРеквизит.Комментарий            = "Автоматически удален " + ТекущаяДата() + "; " + НенужныйРеквизит.Комментарий;
	//	НенужныйРеквизит.ПометкаУдаления 		= Истина;
	//	
	//	Попытка
	//		НенужныйРеквизит.Записать();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		Возврат Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	//
	//НужныйРеквизит 								= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//НужныйРеквизит.Наименование 				= "Инвестиционный проект (Приобретение товаров и услуг)";  
	//НужныйРеквизит.Виден 						= Истина;
	//НужныйРеквизит.Доступен 					= Истина;
	//НужныйРеквизит.Имя		 					= "ИнвестиционныйПроект";
	//НужныйРеквизит.Заголовок 					= "Инвестиционный проект";
	//НужныйРеквизит.НаборСвойств 				= Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПриобретениеТоваровУслуг;
	//НужныйРеквизит.Комментарий					= "Это служебный реквизит - не переименовывайте его!";
	//НужныйРеквизит.ТипЗначения					= Новый ОписаниеТипов("СправочникСсылка.Проекты");
	//НужныйРеквизит.ЭтоДополнительноеСведение 	= Истина;
	//
	//Попытка
	//	НужныйРеквизит.Записать();
	//Исключение
	//	ОтменитьТранзакцию();
	//	Возврат Неопределено;
	//КонецПопытки;
	//
	//ОбъектНаборСвойств = НужныйРеквизит.НаборСвойств.ПолучитьОбъект();
	//Если НужныйРеквизит.ЭтоДополнительноеСведение Тогда
	//	ТабличнаяЧасть = ОбъектНаборСвойств.ДополнительныеСведения;
	//Иначе
	//	ТабличнаяЧасть = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	//КонецЕсли;
	//НайденнаяСтрока = ТабличнаяЧасть.Найти(НужныйРеквизит.Ссылка, "Свойство");
	//Если НайденнаяСтрока = Неопределено Тогда
	//	НоваяСтрока = ТабличнаяЧасть.Добавить();
	//	НоваяСтрока.Свойство = НужныйРеквизит.Ссылка;
	//	Попытка
	//		ОбъектНаборСвойств.Записать();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		Возврат Неопределено;
	//	КонецПопытки;  		
	//КонецЕсли;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат НужныйРеквизит.Ссылка;
	
КонецФункции
Функция ПолучитьНачалоОткрытогоПериода()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(РасчетСебестоимостиТоваров.Дата) КАК Дата
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|ГДЕ
	|	РасчетСебестоимостиТоваров.Проведен
	|	И РасчетСебестоимостиТоваров.ПредварительныйРасчет";
	
	Выборка = Запрос.Выполнить().Выбрать(); 	
	Если Выборка.Следующий() Тогда  
		Возврат НачалоМесяца(Выборка.Дата);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуСписанийПоПартиям() Экспорт
	
	Сообщить("(" + ТекущаяДата() + ") Начат ориентировочный расчет движений по инвестиционным партиям."); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеквизитыИСведения.Партия КАК Партия,
	|	МАКСИМУМ(РеквизитыИСведения.ИнвестиционныйПроект) КАК ИнвестиционныйПроект
	|ПОМЕСТИТЬ втИнвестиционныеПартии
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительныеРеквизиты.Ссылка КАК Партия,
	|		ДополнительныеРеквизиты.Значение КАК ИнвестиционныйПроект
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|	ГДЕ
	|		ДополнительныеРеквизиты.Свойство = &ИнвестиционныйПроект
	|		И ДополнительныеРеквизиты.Значение <> &ПустойПроект
	|		И ДополнительныеРеквизиты.Значение <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительныеСведения.Объект,
	|		ДополнительныеСведения.Значение
	|	ИЗ
	|		РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|	ГДЕ
	|		ДополнительныеСведения.Свойство = &ИнвестиционныйПроект
	|		И ДополнительныеСведения.Значение <> &ПустойПроект
	|		И ДополнительныеСведения.Значение <> НЕОПРЕДЕЛЕНО) КАК РеквизитыИСведения
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыИСведения.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втИнвестиционнаяНоменклатура
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИнвестиционныеПартии КАК втИнвестиционныеПартии
	|		ПО Товары.Ссылка = втИнвестиционныеПартии.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ втИнвестиционнаяАналитикаУчетаНоменклатуры
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИнвестиционнаяНоменклатура КАК втИнвестиционнаяНоменклатура
	|		ПО КлючиАналитикиУчетаНоменклатуры.Номенклатура = втИнвестиционнаяНоменклатура.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтКлиентаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВозвратТоваровОтКлиентаТовары.Ссылка.ДокументРеализации КАК ДокументРеализации
	|ПОМЕСТИТЬ втНоменклатураВозвратов
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИнвестиционнаяАналитикаУчетаНоменклатуры КАК втИнвестиционнаяАналитикаУчетаНоменклатуры
	|		ПО ВозвратТоваровОтКлиентаТовары.АналитикаУчетаНоменклатуры = втИнвестиционнаяАналитикаУчетаНоменклатуры.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураВозвратов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	втНоменклатураВозвратов.ДокументРеализации КАК ДокументРеализации,
	|	МАКСИМУМ(СебестоимостьТоваровОбороты.Партия) КАК Партия
	|ПОМЕСТИТЬ втПартииПоАналитикамВозвратов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			АналитикаУчетаНоменклатуры В
	|				(ВЫБРАТЬ
	|					втНоменклатураВозвратов.АналитикаУчетаНоменклатуры
	|				ИЗ
	|					втНоменклатураВозвратов)) КАК СебестоимостьТоваровОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатураВозвратов КАК втНоменклатураВозвратов
	|		ПО СебестоимостьТоваровОбороты.Регистратор = втНоменклатураВозвратов.ДокументРеализации
	|			И СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры = втНоменклатураВозвратов.АналитикаУчетаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураВозвратов.АналитикаУчетаНоменклатуры,
	|	втНоменклатураВозвратов.ДокументРеализации
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(СебестоимостьТоваровОбороты.Партия) <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СебестоимостьТоваровОстаткиИОбороты.Партия КАК Партия,
	|	СебестоимостьТоваровОстаткиИОбороты.Регистратор КАК Документ,
	|	СебестоимостьТоваровОстаткиИОбороты.Период КАК Период,
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.СтоимостьОборот) / СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоОборот) КАК Цена
	|ПОМЕСТИТЬ втДвиженияПоВторичнымПартиям
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, , ) КАК СебестоимостьТоваровОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИнвестиционнаяАналитикаУчетаНоменклатуры КАК втИнвестиционнаяАналитикаУчетаНоменклатуры
	|		ПО СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры = втИнвестиционнаяАналитикаУчетаНоменклатуры.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	НЕ СебестоимостьТоваровОстаткиИОбороты.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|	И СебестоимостьТоваровОстаткиИОбороты.Партия ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваровОстаткиИОбороты.Регистратор,
	|	СебестоимостьТоваровОстаткиИОбороты.Период,
	|	СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры.Номенклатура,
	|	СебестоимостьТоваровОстаткиИОбороты.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоОборот) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДвиженияПоВторичнымПартиям.Партия КАК Партия
	|ПОМЕСТИТЬ втВторичныеПартии
	|ИЗ
	|	втДвиженияПоВторичнымПартиям КАК втДвиженияПоВторичнымПартиям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеПартииОстатковВозвратовПередач.Партия КАК Партия
	|ПОМЕСТИТЬ втВсеПартииОстатковВозвратовПередач
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СебестоимостьТоваровОстатки.Партия КАК Партия
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(&НачалоОткрытогоПериода, ) КАК СебестоимостьТоваровОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИнвестиционнаяАналитикаУчетаНоменклатуры КАК втИнвестиционнаяАналитикаУчетаНоменклатуры
	|			ПО СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры = втИнвестиционнаяАналитикаУчетаНоменклатуры.АналитикаУчетаНоменклатуры
	|	ГДЕ
	|		СебестоимостьТоваровОстатки.Партия <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		втВторичныеПартии.Партия
	|	ИЗ
	|		втВторичныеПартии КАК втВторичныеПартии
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		втПартииПоАналитикамВозвратов.Партия
	|	ИЗ
	|		втПартииПоАналитикамВозвратов КАК втПартииПоАналитикамВозвратов) КАК ВсеПартииОстатковВозвратовПередач
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВсеПартииОстатковВозвратовПередач.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Партия КАК Партия,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
	|	СУММА(СебестоимостьТоваров.Стоимость) КАК Стоимость,
	|	ВЫБОР
	|		КОГДА СУММА(СебестоимостьТоваров.Количество) = 0
	|			ТОГДА СУММА(СебестоимостьТоваров.Стоимость)
	|		ИНАЧЕ СУММА(СебестоимостьТоваров.Стоимость) / СУММА(СебестоимостьТоваров.Количество)
	|	КОНЕЦ КАК Цена,
	|	МИНИМУМ(СебестоимостьТоваров.Период) КАК Период
	|ПОМЕСТИТЬ втПараметрыПартий
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеПартииОстатковВозвратовПередач КАК втВсеПартииОстатковВозвратовПередач
	|		ПО СебестоимостьТоваров.Регистратор = втВсеПартииОстатковВозвратовПередач.Партия
	|ГДЕ
	|	СебестоимостьТоваров.ВидДвижения = &Приход
	|	И СебестоимостьТоваров.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.Партия,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СебестоимостьТоваровОстатки.Партия КАК Партия,
	|	СУММА(СебестоимостьТоваровОстатки.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(СебестоимостьТоваровОстатки.КоличествоОстаток) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СебестоимостьТоваровОстатки.СтоимостьОстаток) / СУММА(СебестоимостьТоваровОстатки.КоличествоОстаток)
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ втОстатки_Предварительная
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&НачалоОткрытогоПериода, ) КАК СебестоимостьТоваровОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИнвестиционнаяАналитикаУчетаНоменклатуры КАК втИнвестиционнаяАналитикаУчетаНоменклатуры
	|		ПО СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры = втИнвестиционнаяАналитикаУчетаНоменклатуры.АналитикаУчетаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Номенклатура,
	|	СебестоимостьТоваровОстатки.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(СебестоимостьТоваровОстатки.КоличествоОстаток) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИнвестиционныеПартии.Партия КАК Партия,
	|	втИнвестиционныеПартии.ИнвестиционныйПроект КАК ИнвестиционныйПроект
	|ИЗ
	|	втИнвестиционныеПартии КАК втИнвестиционныеПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.Партия КАК Партия,
	|	ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК ПередачаТоваров,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот) КАК Количество,
	|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, ) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИнвестиционнаяАналитикаУчетаНоменклатуры КАК втИнвестиционнаяАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = втИнвестиционнаяАналитикаУчетаНоменклатуры.АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВторичныеПартии КАК втВторичныеПартии
	|		ПО ВыручкаИСебестоимостьПродажОбороты.Регистратор = втВторичныеПартии.Партия
	|ГДЕ
	|	ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|	И ВыручкаИСебестоимостьПродажОбороты.Партия <> ВыручкаИСебестоимостьПродажОбороты.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимостьПродажОбороты.Регистратор,
	|	ВыручкаИСебестоимостьПродажОбороты.Партия,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПартииПоАналитикамВозвратов.ДокументРеализации КАК ДокументРеализации,
	|	втПартииПоАналитикамВозвратов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	втПартииПоАналитикамВозвратов.Партия КАК Партия,
	|	втПараметрыПартий.Цена КАК ЦенаПартии,
	|	втПараметрыПартий.Период КАК ДатаПартии
	|ИЗ
	|	втПартииПоАналитикамВозвратов КАК втПартииПоАналитикамВозвратов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыПартий КАК втПараметрыПартий
	|		ПО втПартииПоАналитикамВозвратов.АналитикаУчетаНоменклатуры.Номенклатура = втПараметрыПартий.Номенклатура
	|			И втПартииПоАналитикамВозвратов.Партия = втПараметрыПартий.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРеализации,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки_Предварительная.Номенклатура КАК Номенклатура,
	|	втОстатки_Предварительная.Партия КАК Партия,
	|	МИНИМУМ(ЕСТЬNULL(втПараметрыПартий.Период, ДАТАВРЕМЯ(2099, 1, 1))) КАК ДатаПартии,
	|	МАКСИМУМ(ЕСТЬNULL(втПараметрыПартий.Цена, 0)) КАК ЦенаПартии,
	|	МАКСИМУМ(втОстатки_Предварительная.Количество) КАК Количество,
	|	МАКСИМУМ(втОстатки_Предварительная.Цена) КАК Цена
	|ИЗ
	|	втОстатки_Предварительная КАК втОстатки_Предварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыПартий КАК втПараметрыПартий
	|		ПО втОстатки_Предварительная.Номенклатура = втПараметрыПартий.Номенклатура
	|			И втОстатки_Предварительная.Партия = втПараметрыПартий.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	втОстатки_Предварительная.Номенклатура,
	|	втОстатки_Предварительная.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ДатаПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СебестоимостьТоваровОстаткиИОбороты.Партия КАК Партия,
	|	СебестоимостьТоваровОстаткиИОбороты.Регистратор КАК Документ,
	|	СебестоимостьТоваровОстаткиИОбороты.Период КАК Период,
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.СтоимостьОборот) / СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоОборот) КАК Цена,
	|	ЛОЖЬ КАК Обработано,
	|	СебестоимостьТоваровОстаткиИОбороты.Партия КАК ВторичнаяПартия,
	|	0 КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&НачалоОткрытогоПериода, &Дата2, Регистратор, , ) КАК СебестоимостьТоваровОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИнвестиционнаяАналитикаУчетаНоменклатуры КАК втИнвестиционнаяАналитикаУчетаНоменклатуры
	|		ПО СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры = втИнвестиционнаяАналитикаУчетаНоменклатуры.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	НЕ СебестоимостьТоваровОстаткиИОбороты.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваровОстаткиИОбороты.Регистратор,
	|	СебестоимостьТоваровОстаткиИОбороты.Период,
	|	СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры.Номенклатура,
	|	СебестоимостьТоваровОстаткиИОбороты.Партия,
	|	СебестоимостьТоваровОстаткиИОбороты.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(СебестоимостьТоваровОстаткиИОбороты.КоличествоОборот) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДвиженияПоВторичнымПартиям.Номенклатура,
	|	втДвиженияПоВторичнымПартиям.Партия,
	|	втДвиженияПоВторичнымПартиям.Документ,
	|	втДвиженияПоВторичнымПартиям.Период,
	|	втДвиженияПоВторичнымПартиям.КоличествоПриход,
	|	втДвиженияПоВторичнымПартиям.КоличествоОборот,
	|	втДвиженияПоВторичнымПартиям.Цена,
	|	ЛОЖЬ,
	|	втДвиженияПоВторичнымПартиям.Партия,
	|	0
	|ИЗ
	|	втДвиженияПоВторичнымПартиям КАК втДвиженияПоВторичнымПартиям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	КоличествоПриход УБЫВ,
	|	Период";
	
	//ПараметрНачалоОткрытогоПериода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НачалоОткрытогоПериода");
	//ПараметрНачалоОткрытогоПериодаЗначение = Неопределено;
	//Если ПараметрНачалоОткрытогоПериода <> Неопределено И ЗначениеЗаполнено(ПараметрНачалоОткрытогоПериода.Значение) Тогда 
	//	ПараметрНачалоОткрытогоПериодаЗначение = ПараметрНачалоОткрытогоПериода.Значение;
	//	НачалоОткрытогоПериода = ПараметрНачалоОткрытогоПериодаЗначение;
	//Иначе
		НачалоОткрытогоПериода = ПолучитьНачалоОткрытогоПериода(); // ищем месяц, где нет документа фактического расчета себестоимости
	//КонецЕсли;    	
	
	Запрос.УстановитьПараметр("Приход", 					ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ПустойПроект",				Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИнвестиционныйПроект", 		ПолучитьРеквизитИнвестиционныйПроект());
	Запрос.УстановитьПараметр("НачалоОткрытогоПериода", 	НачалоОткрытогоПериода); 	
	Запрос.УстановитьПараметр("Дата1", 						ТекущаяДата()-365*24*60*60);  		// всавить сюда дату начала перида отчета...
	Запрос.УстановитьПараметр("Дата2", 						ТекущаяДата());  					// всавить сюда дату окончания перида отчета...
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();                
	
	тзПроектыПоПартиям = РезультатыЗапроса[РезультатыЗапроса.Количество()-5].Выгрузить();
	тзПроектыПоПартиям.Индексы.Добавить("Партия");
	
	тзДляПоискаПартийПоПередачам =  РезультатыЗапроса[РезультатыЗапроса.Количество()-4].Выгрузить(); 		
	тзДляПоискаПартийПоПередачам.Индексы.Добавить("Номенклатура, ПередачаТоваров");
	
	тзДляПоискаПартийПоВозвратам =  РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выгрузить(); 		
	тзДляПоискаПартийПоВозвратам.Индексы.Добавить("Номенклатура, ДокументРеализации");
	
	тзОстатки = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
	тзОстатки.Индексы.Добавить("Номенклатура, Партия");
	
	//// нужно только для отладки...
	//регОстатки = РегистрыСведений._ОстаткиПоПартиямОриентировочноДоРасчета.СоздатьНаборЗаписей();
	//регОстатки.Загрузить(тзОстатки);
	//регОстатки.Записать(Истина);
	
	тзДвижения = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	тзДвижения.Индексы.Добавить("Документ, Номенклатура");
	
	//ПоискПартии 		= Новый Структура("АналитикаУчетаНоменклатуры, Партия");
	//ПоискНоменклатуры 	= Новый Структура("АналитикаУчетаНоменклатуры");
	ПоискПартии 		= Новый Структура("Номенклатура, Партия");
	ПоискНоменклатуры 	= Новый Структура("Номенклатура");
	ПоискРеализации		= Новый Структура("Номенклатура, ДокументРеализации");
	ПоискПередачи 		= Новый Структура("Номенклатура, ПередачаТоваров");
	
	Для Проход =1 по 2 Цикл
	Для Каждого иДвижение Из тзДвижения Цикл
		
		Если иДвижение.Обработано Тогда   			
			Продолжить;			
		КонецЕсли;	
			
		иДвижение.ВторичнаяПартия = Неопределено; // в запросе это поле просто чтобы тип нужный был при выгрузке результата в ТЗ
		
		//// отладочный режим ->
		//Если ЗначениеЗаполнено(ПараметрНачалоОткрытогоПериодаЗначение) Тогда 
		//	Если ЗначениеЗаполнено(иДвижение.Партия) И иДвижение.Период > ПараметрНачалоОткрытогоПериодаЗначение И иДвижение.КоличествоОборот < 0 Тогда 
		//		 иДвижение.Партия = Неопределено;
		//	КонецЕсли;
		//КонецЕсли;
		////<-
		
		Если ЗначениеЗаполнено(иДвижение.Партия) И ТипЗнч(иДвижение.Партия) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") И иДвижение.КоличествоОборот < 0 Тогда
			// надо подобрать настоящие партии вместо передачи товаров
			
			Если иДвижение.Период > НачалоОткрытогоПериода Тогда 
				Сообщить("Движение с заполненной партией в открытом периоде: 
				|	Номенклатура: " + иДвижение.Номенклатура + "
				|	Списание: " + иДвижение.Документ + "
				|	Партия: " + иДвижение.Партия );
			КонецЕсли;
			
			//Если иДвижение.КоличествоОборот > 0 Тогда
			//	// это вероятно возврат партии = "передача товара"
			//	
			//	//ЗаполнитьЗначенияСвойств(ПоискПартии, иДвижение);
			//	//СтрокиОстатка = тзОстатки.НайтиСтроки(ПоискПартии);
			//	//Если СтрокиОстатка.Количество() =0 Тогда 
			//	//	СтрокаОстатка = тзОстатки.Добавить();
			//	//	ЗаполнитьЗначенияСвойств(СтрокаОстатка, иДвижение);
			//	//	СтрокаОстатка.ДатаПартии = иДвижение.Период;
			//	//	СтрокаОстатка.Количество = иДвижение.КоличествоОборот;
			//	//Иначе
			//	//	СтрокаОстатка = СтрокиОстатка[0];
			//	//	СтрокаОстатка.Количество = СтрокаОстатка.Количество + иДвижение.КоличествоОборот;
			//	//КонецЕсли;  
			//	//иДвижение.Обработано = Истина; // второй проход для расчета возвратов по только что рассчитанным реализациям по этой строке не требуется
			//	
			//Иначе
				// это реализация или розничная продажа не от Агромира из закрытого периода,
				// но партия = "передача товара" нам не интересна - нужно раскрыть глубже, чтобы вытащить параметры партии из документа приобретения
				
				ПоискПередачи.ПередачаТоваров 	= иДвижение.Партия;
				ПоискПередачи.Номенклатура 		= иДвижение.Номенклатура;
				СтрокиПартийПоПередачам = тзДляПоискаПартийПоПередачам.НайтиСтроки(ПоискПередачи);
				Для каждого СтрокаОстаткаПередачи Из СтрокиПартийПоПередачам Цикл 
					Если СтрокаОстаткаПередачи.Количество <= 0 Тогда 
						Продолжить;
					КонецЕсли; 				
					
					НадоСписать = мин(-иДвижение.КоличествоОборот, СтрокаОстаткаПередачи.Количество);
					СтрокаОстаткаПередачи.Количество = СтрокаОстаткаПередачи.Количество - НадоСписать;				
					
					Если -иДвижение.КоличествоОборот = НадоСписать Тогда 
						иДвижение.ВторичнаяПартия 	= СтрокаОстаткаПередачи.Партия;
						//иДвижение.Цена 			= СтрокаОстаткаПередачи.Цена;
						иДвижение.Обработано 		= Истина; // второй проход для расчета возвратов по только что рассчитанным реализациям по этой строке не требуется
						Прервать;
						
					Иначе // иДвижение.КоличествоРасход > НадоСписать  // по-любому 					
						иДвижение.КоличествоОборот 	= иДвижение.КоличествоОборот + НадоСписать;
						
						// заполняем партию и списанное количество в добавленной строке 
						новДвижение 					= тзДвижения.Добавить();
						ЗаполнитьЗначенияСвойств(новДвижение, иДвижение);
						новДвижение.ВторичнаяПартия		= СтрокаОстаткаПередачи.Партия;
						//новДвижение.Цена 				= СтрокаОстаткаПередачи.Цена;
						новДвижение.КоличествоОборот 	= -НадоСписать;
						новДвижение.Обработано 			= Истина;  // эта строка уже повлияла на остатки - ее не надо обрабатывать ни в конце первого прохода (когда до нее очередь дойдет), ни во втором
					КонецЕсли;
				КонецЦикла; 				
				
				Если НЕ ЗначениеЗаполнено(иДвижение.Партия) Тогда
					// косяк - не хватает остатков передачи
					Сообщить("Не хватает количества передачи для подбора первичных партий: 
					|	Номенклатура: " + иДвижение.Номенклатура + "
					|	Списание: " + иДвижение.Документ + "
					|	Партия: " + иДвижение.Партия + "
					|	Нехватка: " + иДвижение.КоличествоОборот); 				
				КонецЕсли;
				
				// изменять таблицу остатков не надо т.к. данное движение - из закрытого периода
			//КонецЕсли;   			
			
		ИначеЕсли ЗначениеЗаполнено(иДвижение.Партия) Тогда  			
			// партия уже известна - просто изменим остаток
			
			Если иДвижение.Период > НачалоОткрытогоПериода И иДвижение.КоличествоОборот < 0 Тогда 
				Сообщить("Движение с заполненной партией в открытом периоде: 
				|	Номенклатура: " + иДвижение.Номенклатура + "
				|	Списание: " + иДвижение.Документ + "
				|	Партия: " + иДвижение.Партия + "
				|	Нехватка: " + иДвижение.КоличествоОборот); 				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПоискПартии, иДвижение);
			СтрокиОстатка = тзОстатки.НайтиСтроки(ПоискПартии);
			Если СтрокиОстатка.Количество() =0 Тогда 
				СтрокаОстатка = тзОстатки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОстатка, иДвижение);
				СтрокаОстатка.ДатаПартии = иДвижение.Период;
				СтрокаОстатка.Количество = иДвижение.КоличествоОборот;
			Иначе
				СтрокаОстатка = СтрокиОстатка[0];
				СтрокаОстатка.Количество = СтрокаОстатка.Количество + иДвижение.КоличествоОборот;
			КонецЕсли;  
			иДвижение.Обработано = Истина; // второй проход для расчета возвратов по только что рассчитанным реализациям по этой строке не требуется
			
		ИначеЕсли иДвижение.КоличествоОборот > 0 Тогда
			// это приход без указания партии
			
			Если ТипЗнч(иДвижение.Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
				// надо попробовать получить партию из реализации...
				Реализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(иДвижение.Документ, "ДокументРеализации");
				Если ЗначениеЗаполнено(Реализация) Тогда 
					
					ПартияВозврата = Неопределено;
					ЦенаПартии = 0;

					СтрокиДвиженийРеализации = тзДвижения.НайтиСтроки(Новый Структура("Документ, Номенклатура", Реализация, иДвижение.Номенклатура));
					Для Каждого иДвижениеРеализации Из СтрокиДвиженийРеализации Цикл
						Если ЗначениеЗаполнено(иДвижениеРеализации.Партия) Тогда 
							ПартияВозврата  = иДвижениеРеализации.Партия;
							ЦенаПартии		= иДвижениеРеализации.Цена;
							Прервать;
						КонецЕсли;
					КонецЦикла;

					Если НЕ ЗначениеЗаполнено(ПартияВозврата) Тогда 
						ПоискРеализации.ДокументРеализации 	= Реализация;
						ПоискРеализации.Номенклатура 		= иДвижение.Номенклатура;
						СтрокиПартийПоВозвратам = тзДляПоискаПартийПоВозвратам.НайтиСтроки(ПоискРеализации);
						Для каждого иСтрока Из СтрокиПартийПоВозвратам Цикл 
							Если ЗначениеЗаполнено(иСтрока.Партия) Тогда 
								ПартияВозврата 	= иСтрока.Партия;
								ЦенаПартии		= иСтрока.ЦенаПартии;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПартияВозврата) Тогда  
						
						иДвижение.Партия 		= ПартияВозврата; // просто для порядка
						иДвижение.Обработано 	= Истина; // второй проход для расчета возвратов по только что рассчитанным реализациям по этой строке не требуется
						
						ПоискПартии.Номенклатура 	= иДвижение.Номенклатура;
						ПоискПартии.Партия 			= ПартияВозврата;
						СтрокиОстатка = тзОстатки.НайтиСтроки(ПоискПартии);
						Если СтрокиОстатка.Количество() =0 Тогда 
							СтрокаОстатка 				= тзОстатки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаОстатка, ПоискПартии);
							СтрокаОстатка.ДатаПартии 	= иДвижение.Период;
							СтрокаОстатка.Количество 	= иДвижение.КоличествоОборот;
							СтрокаОстатка.Цена 			= ?(ЦенаПартии <> 0, ЦенаПартии, ПолучитьЦенуПартии(ПартияВозврата, иДвижение.Номенклатура));
						Иначе
							СтрокаОстатка = СтрокиОстатка[0];
							СтрокаОстатка.Количество = СтрокаОстатка.Количество + иДвижение.КоличествоОборот;
						КонецЕсли; 
						
					ИначеЕсли Проход = 2 Тогда	
						Сообщить("Для возврата не удалось определить партию из реализации:
						|	Номенклатура: " + иДвижение.Номенклатура + "
						|	Документ: " + иДвижение.Документ + "
						|	Основание: " + Реализация + "
						|	Количество: " + иДвижение.КоличествоОборот);
					КонецЕсли;
					
				ИначеЕсли Проход = 2 Тогда
					Сообщить("Возврат без указания реализации:
					|	Номенклатура: " + иДвижение.Номенклатура + "
					|	Документ: " + иДвижение.Документ + "
					|	Количество: " + иДвижение.КоличествоОборот);
				КонецЕсли;
				
			ИначеЕсли Проход = 2 Тогда
				Сообщить("Поступление без указания партии:
				|	Номенклатура: " + иДвижение.Номенклатура + "
				|	Документ: " + иДвижение.Документ + "
				|	Количество: " + иДвижение.КоличествоОборот);
			КонецЕсли;
			
		ИначеЕсли иДвижение.КоличествоОборот < 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ПоискНоменклатуры, иДвижение);
			СтрокиОстатка = тзОстатки.НайтиСтроки(ПоискНоменклатуры);			
			Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
				Если СтрокаОстатка.Количество <= 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				НадоСписать = мин(-иДвижение.КоличествоОборот, СтрокаОстатка.Количество);
				СтрокаОстатка.Количество = СтрокаОстатка.Количество - НадоСписать;				
				
				Если -иДвижение.КоличествоОборот = НадоСписать Тогда 
					иДвижение.Партия 		= СтрокаОстатка.Партия;
					иДвижение.Цена 			= СтрокаОстатка.Цена;
					иДвижение.Обработано 	= Истина; // второй проход для расчета возвратов по только что рассчитанным реализациям по этой строке не требуется
					Прервать;
					
				Иначе // иДвижение.КоличествоРасход > НадоСписать  // по-любому 					
					иДвижение.КоличествоОборот 	= иДвижение.КоличествоОборот + НадоСписать;
					
					// заполняем партию и списанное количество в добавленной строке 
					новДвижение 					= тзДвижения.Добавить();
					ЗаполнитьЗначенияСвойств(новДвижение, иДвижение);
					новДвижение.Партия 				= СтрокаОстатка.Партия;
					новДвижение.Цена 				= СтрокаОстатка.Цена;
					новДвижение.КоличествоОборот 	= -НадоСписать;
					новДвижение.Обработано 			= Истина;  // эта строка уже повлияла на остатки - ее не надо обрабатывать ни в конце первого прохода (когда до нее очередь дойдет), ни во втором
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(иДвижение.Партия) И Проход = 2 Тогда
				// косяк - не хватает остатков
				Сообщить("Не хватает остатков для списания: 
				|	Номенклатура: " + иДвижение.Номенклатура + "
				|	Списание: " + иДвижение.Документ + "
				|	Нехватка: " + иДвижение.КоличествоОборот); 				
			КонецЕсли;
			
		КонецЕсли;   		
	КонецЦикла;
	КонецЦикла;

	//// нужно только для отладки...
	//тзОстатки.Сортировать("Номенклатура, ДатаПартии");  	
	//регОстатки = РегистрыСведений._ОстаткиПоПартиямОриентировочноПослеРасчета.СоздатьНаборЗаписей();
	//регОстатки.Загрузить(тзОстатки);
	//регОстатки.Записать(Истина);
	
	тзДвижения.Колонки.Добавить("Количество");
	тзДвижения.Колонки.Добавить("Сумма");
	
	// приходы в отчете не используются
	мсвУдалитьПриходы = новый Массив;	
	Для Каждого иДвижение Из тзДвижения Цикл
		Если иДвижение.КоличествоОборот >= 0 Тогда 
			мсвУдалитьПриходы.Добавить(иДвижение);
		Иначе
			иДвижение.Количество 	= -иДвижение.КоличествоОборот;
			иДвижение.Сумма 		= иДвижение.Количество * иДвижение.Цена;
		КонецЕсли;
	КонецЦикла;   	
	Для Каждого иДвижение Из мсвУдалитьПриходы Цикл
		тзДвижения.Удалить(иДвижение);
	КонецЦикла;
	
	// в отчете используются только данные по инвест проектам
	мсвУдалитьПартии = новый Массив;	
	Для Каждого иДвижение Из тзДвижения Цикл
		ИскомаяПартия = ?(ЗначениеЗаполнено(иДвижение.ВторичнаяПартия), иДвижение.ВторичнаяПартия, иДвижение.Партия);
		Если тзПроектыПоПартиям.Найти(ИскомаяПартия, "Партия") = Неопределено Тогда 
			мсвУдалитьПартии.Добавить(иДвижение);
		КонецЕсли;
	КонецЦикла;   	
	Для Каждого иДвижение Из мсвУдалитьПартии Цикл
		тзДвижения.Удалить(иДвижение);
	КонецЦикла;  	

	тзДвижения.Свернуть("Период, Номенклатура, Документ, Партия, ВторичнаяПартия", "Количество, Сумма");
	тзДвижения.Сортировать("Номенклатура, Период");
	
	регДвижения = РегистрыСведений._ДвиженияПоПартиямОриентировочно.СоздатьНаборЗаписей();
	регДвижения.Загрузить(тзДвижения);
	регДвижения.Записать(Истина);
	
	Сообщить("(" + ТекущаяДата() + ") Ориентировочный расчет движений по инвестиционным партиям произведен."); 
	
	Возврат тзДвижения;
	
КонецФункции

Функция ПолучитьЦенуПартии(ДокументПартии, Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СебестоимостьТоваровОбороты.СтоимостьОборот) / СУММА(СебестоимостьТоваровОбороты.КоличествоОборот) КАК Цена
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(, , Регистратор, АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура) КАК СебестоимостьТоваровОбороты
	|ГДЕ
	|	СебестоимостьТоваровОбороты.Регистратор = &ДокументПартии
	|
	|ИМЕЮЩИЕ
	|	СУММА(СебестоимостьТоваровОбороты.КоличествоОборот) <> 0";
	
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("ДокументПартии", ДокументПартии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция НадоРассчитатьОриентировочныеДвиженияПоПартиям()
	
	ПараметрНеПересчитывать = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НеПересчитыватьОриентировочныеДвиженияПоПартиям");
	Если ПараметрНеПересчитывать <> Неопределено И ПараметрНеПересчитывать.Значение = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_ДвиженияПоПартиямОриентировочно.Период КАК Период
	|ИЗ
	|	РегистрСведений._ДвиженияПоПартиямОриентировочно КАК _ДвиженияПоПартиямОриентировочно
	| 
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Выборка1 = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СебестоимостьТоваров.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|
	|УПОРЯДОЧИТЬ ПО
	|	СебестоимостьТоваров.Период УБЫВ";
	
	Выборка2 = Запрос.Выполнить().Выбрать();
	
	Если Выборка2.Следующий() Тогда 
		Если Выборка1.Следующий() Тогда 
			//Возврат (НачалоДня(Выборка.Период) < НачалоДня(ТекущаяДата()-24*60*60));
			Возврат (НачалоДня(Выборка1.Период) < НачалоДня(Выборка2.Период));
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//РаспаковкаТекстаЗапроса();